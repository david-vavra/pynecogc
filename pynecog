#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
    Copyright (C) 2014  David Vavra  (vavra.david@email.cz)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

"""

from mako.template import Template
import sys
import argparse

from pyrage.netparse import Device
from pyrage.netparse import XML_NetworkParser
from pyrage.logger import Logger

from pyrage.utils import InvalidData


def main():

    """
    Handle input args
    """
    argParser=argparse.ArgumentParser(description="Generates network configuration from mako templates and parameters stored in xml")
    argParser.add_argument('-t','--template',help="A path for Mako template")
    argParser.add_argument('-n','--networkDef', help="Location of the network definition XML file")
    argParser.add_argument('device',nargs='+')
    inputArgs=argParser.parse_args(sys.argv[1:])

    logger = Logger('warning')

    """
     try to parse xml file
    """
    parser = XML_NetworkParser(logger,inputArgs.networkDef)
    deviceInstances={}
    for dev in inputArgs.device:
        deviceInstances[dev]=Device(dev)
        try:
            parser.parseDevice(deviceInstances[dev])
        except InvalidData as e:
            logger.log('error',dev+e.msg)
            raise SystemExit(1)
    """
    Try to open open template
    """
    from mako import exceptions

    mkt=Template(open(inputArgs.template).read())
    for dev,instance in deviceInstances.items():
        f=open('{0}'.format(dev),'w')
        try:
            f.write(mkt.render(
                device=instance,
                **instance.instances))
        except:
            print (exceptions.text_error_template().render())
        f.close()
        sys.stdout.write("Generated configuration saved in file '{0}'.\n".format(dev))

if __name__=="__main__":
    main()